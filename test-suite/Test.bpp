@include_once "detect-tty.bpp"
@include_once "TestStats.bpp"

@class Test {
	@public instruction_file
	@public expected_output_file
	@public input_file
	@public status="untested"
	@public @TestStats* stats=@nullptr

	@public @method finishTest {
		if [[ @this.stats != @nullptr ]]; then
			case "@this.status" in
				"untested")
					@this.stats.incrementUntestedTests
					;;
				"pass")
					@this.stats.incrementPassedTests
					;;
				"fail")
					@this.stats.incrementFailedTests
					;;
				*)
					@this.stats.incrementUntestedTests
					;;
			esac
		fi
		@this.toPrimitive
	}

	@public @method run optimization_level {
		if [[ -z "@this.instruction_file" || -z "@this.expected_output_file" ]]; then
			echo "Error: instruction_file or expected_output_file is not set."
			@this.status="fail"
			@this.finishTest
			return 1
		fi
		if [[ ! -f "@this.instruction_file" ]]; then
			echo "Error: instruction_file '@this.instruction_file' does not exist."
			@this.status="fail"
			@this.finishTest
			return 1
		fi
		if [[ ! -f "@this.expected_output_file" ]]; then
			echo "Error: expected_output_file '@this.expected_output_file' does not exist."
			@this.status="fail"
			@this.finishTest
			return 1
		fi

		local expected_output="@(cat "@this.expected_output_file")"
		local input_file_contents=""
		local optimized_output original_output

		if [[ ! -z "@this.input_file" ]]; then
			if [[ ! -f "@this.input_file" ]]; then
				echo "Error: input_file '@this.input_file' does not exist."
				@this.status="fail"
				@this.finishTest
				return 1
			fi
			input_file_contents="@(cat "@this.input_file")"
		fi

		if [[ -z "$optimization_level" ]]; then
			optimization_level=1
		fi

		local optimized_instruction_file=$(mktemp)
		${OPTIMIZER} -O${optimization_level} -f "@this.instruction_file" > ${optimized_instruction_file}

		# Some checks for the optimizer output:
		## 1. If the optimization level is >=1, then we know that all INSERT instructions should be paired together,
		##    all REMOVE instructions should be paired together, and all REPLACE instructions should be paired together.
		if [[ $optimization_level -ge 1 ]]; then
			# Match against the following regex:
			# (INSERT[^\n]+\n?)*(REMOVE[^\n]+\n?)*(REPLACE[^\n]+\n?)*
			if ! grep -Pzq '(?s)^(INSERT[^\n]+\n)*(REMOVE[^\n]+\n)*(REPLACE[^\n]+\n)*$' <<<$(cat "${optimized_instruction_file}"); then
				echo "Error: Optimized instructions do not match the expected format for optimization level ${optimization_level}."
				@this.status="fail"
				@this.finishTest
				rm -f "${temp_file}"
				rm -f "${optimized_instruction_file}"
				return 1
			fi
			# All of the INSERT instructions must be ordered by position
			# And all of the REMOVE instructions must be ordered by position

			# For each of the insert instructions:
			# Verify that the start position is >= the previous start position
			local previous_insert_position=0
			while IFS= read -r line; do
				if [[ $line =~ ^INSERT\ ([0-9]+)\  ]]; then
					local current_insert_position="${BASH_REMATCH[1]}"
					if (( current_insert_position < previous_insert_position )); then
						echo "Error: INSERT instructions are not ordered by position."
						@this.status="fail"
						@this.finishTest
						rm -f "${temp_file}"
						rm -f "${optimized_instruction_file}"
						return 1
					fi
					previous_insert_position=$current_insert_position
				fi
			done < "${optimized_instruction_file}"

			# For each of the remove instructions:
			# Verify that the start position is >= the previous start position
			local previous_remove_position=0
			while IFS= read -r line; do
				if [[ $line =~ ^REMOVE\ ([0-9]+)\  ]]; then
					local current_remove_position="${BASH_REMATCH[1]}"
					if (( current_remove_position < previous_remove_position )); then
						echo "Error: REMOVE instructions are not ordered by position."
						@this.status="fail"
						@this.finishTest
						rm -f "${temp_file}"
						rm -f "${optimized_instruction_file}"
						return 1
					fi
					previous_remove_position=$current_remove_position
				fi
			done < "${optimized_instruction_file}"
		fi

		if [[ ! -s "$optimized_instruction_file" ]]; then
			echo "Error: Optimization failed."
			@this.status="fail"
			@this.finishTest
			rm -f "${temp_file}"
			rm -f "${optimized_instruction_file}"
			return 1
		fi

		# Copy the file
		local temp_file=$(mktemp)
		echo "${input_file_contents}" > "${temp_file}"

		# Get the original output
		polonius-editor "${temp_file}" -f "@this.instruction_file"
		original_output="@(cat "${temp_file}")"

		rm -f "${temp_file}"
		echo "${input_file_contents}" > "${temp_file}"

		# Compare the original output with the expected output
		if [[ "${original_output}" != "${expected_output}" ]]; then
			echo "Error: Original output does not match expected output for test '@{this.instruction_file}'."
			@this.status="fail"
			@this.finishTest
			rm -f "${temp_file}"
			rm -f "${optimized_instruction_file}"
			return 1
		fi

		# Get the optimized output
		polonius-editor "${temp_file}" -f "${optimized_instruction_file}"
		optimized_output="@(cat "${temp_file}")"

		rm -f "${temp_file}"
		rm -f "${optimized_instruction_file}"

		# Compare the outputs
		if [[ "${original_output}" == "${optimized_output}" ]]; then
			@this.status="pass"
		else
			@this.status="fail"
		fi
		@this.finishTest
	}

	@public @method toPrimitive {
		# Display the test name and status
		# In the format:
		# TestName: Status
		# The status should be colored green if pass, red if fail, and yellow if untested

		local statusColor="33"
		if [[ "@this.status" == "pass" ]]; then
			statusColor="32"
		elif [[ "@this.status" == "fail" ]]; then
			statusColor="31"
		fi

		local colorize="\033[1;${statusColor}m" uncolorize="\033[0m"

		if [[ "$in_tty" == "false" ]]; then
			colorize=""
			uncolorize=""
		fi

		local test_name="@(basename "@this.instruction_file")"

		echo -n -e "${test_name}: ${colorize}@this.status${uncolorize}\n"
	}
}
